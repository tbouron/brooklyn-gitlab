#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Be aware that Gitlab instance and Nginx server require a Debian based Linux environment.
# The blueprint enforce this by setting the provisioning.properties for the Gitlab node.
#
brooklyn.catalog:
  id: gitlab-w-postgres-redis-store-and-nginx
  version: 1.2.0-SNAPSHOT
  itemType: template
  iconUrl: https://gitlab.com/gitlab-org/gitlab-ce/raw/master/app/assets/images/gitlab_logo.png
  name: Gitlab with PostgreSQL, Redis store and Nginx
  license: Apache-2.0
  publish:
    description: Pure Brooklyn YAML blueprint to deploy a Gitlab instance
    license_code: Apache-2.0
    overview: README.md
    reference: reference.json
    changelog: CHANGELOG.md
  maintainer_name: Thomas Bouron
  maintainer_email: tbouron@gmail.com
  issues_url: https://gitlab.com/gitlab-org/gitlab-ce/raw/master/app/assets/images/gitlab_logo.png
  item:
    origin: https://gitlab.com
    brooklyn.parameters:
    - name: gitlab.version
      label: Gitlab version
      description: Version of Gitlab to deploy
      type: string
      default: 7-11-stable
    - name: gitlab.email.from
      label: Gitlab email from property
      description: Email address Gitlab will use to send email
      type: string
      default: gitlab@brooklyn.local
    - name: gitlab.email.display_name
      label: Gitlab display name property
      description: Display name Gitlab will use to send email
      type: string
      default: GitLab powered by Brooklyn
    - name: gitlab.email.reply_to
      label: Gitlab email to property
      description: Email address users will reply to from an email sent by Gitlab
      type: string
      default: gitlab@brooklyn.local
    - name: gitlab.db.username
      label: Gitlab database username
      description: The username to connect to the Gitlab database
      type: string
      default: git
      contraints: required
    - name: gitlab.db.password
      label: Gitlab database password
      description: The password to connect to the Gitlab database
      type: string
      default: passw0rd
      contraints: required
    - name: gitlab.db.database
      label: Gitlab database name
      description: The database name to connect to
      type: string
      default: gitlabhq_production
      contraints: required
    - name: connect.mode
      label: Connect mode
      description: Set the connect mode to "gitlab" to restrict TCP/IP connections from Gitlab instance only or "all" for any hosts
      type: string
      default: all
    services:
      - type: brooklyn.entity.database.postgresql.PostgreSqlNode
        id: postgresql
        name: PostgreSQL Database
        datastore.creation.script.contents: $brooklyn:formatString("CREATE USER %1$s WITH PASSWORD '%2$s' CREATEDB; CREATE DATABASE %3$s OWNER %1$s;",
          config("gitlab.db.username"), config("gitlab.db.password"), config("gitlab.db.database"))
        shell.env:
          GITLAB_HOST: $brooklyn:component("gitlab").attributeWhenReady("host.address")
          POSTGRESQL_HOME: $brooklyn:attributeWhenReady("install.dir")
          POSTGRESQL_DATA: $brooklyn:attributeWhenReady("run.dir")
          DB_USER: $brooklyn:config("gitlab.db.username")
          DB_PASSWORD: $brooklyn:config("gitlab.db.password")
          DB_DATABASE: $brooklyn:config("gitlab.db.database")
          CONNECT_MODE: $brooklyn:config("connect.mode")
        post.launch.command: |

          if [ "$CONNECT_MODE" == "gitlab" ]; then
            # Allow only our Gitlab instance to connect to PostgreSQL by commenting
            # the line with IP 0.0.0.0/0 and adding our own.
            sudo su -c "sed -i 's/^\(.*0\.0\.0\.0.*\)$/#\1/g' $POSTGRESQL_DATA/data/pg_hba.conf"
            sudo su -c "echo 'host $DB_DATABASE $DB_USER $GITLAB_HOST/32 md5' >> $POSTGRESQL_DATA/data/pg_hba.conf"

            # Restart PostgreSQL
            sudo -E -n -u postgres -s -- $POSTGRESQL_HOME/bin/pg_ctl -D $POSTGRESQL_DATA/data -l $POSTGRESQL_DATA/postgresql.log restart ;
          fi

      - type: brooklyn.entity.nosql.redis.RedisStore
        id: redis
        name: Redis Store

      - type: brooklyn.entity.basic.SameServerEntity
        id: node
        name: Gitlab node
        provisioning.properties:
          osFamily: ubuntu
          minRam: 2048mb
          minCores: 2
        # and add an enricher at the root node so all sensors from gitlab are visible
        brooklyn.enrichers:
        - enricherType: brooklyn.enricher.basic.Propagator
          brooklyn.config:
            enricher.producer: $brooklyn:component("gitlab")
            enricher.propagating.propagatingAll: true
        brooklyn.children:
        - type: brooklyn.entity.basic.VanillaSoftwareProcess
          id: nginx
          name: Nginx server
          version: 2
          brooklyn.config:
            # FIXME: present for its side effect of opening a port in the security group - but changing this won't actually change the nginx config
            nginx.http.port: 80
          install.latch: $brooklyn:component("gitlab").attributeWhenReady("service.isUp")
          install.command: |

            # Install Nginx
            sudo apt-get -y install nginx

          customize.command: |

            # Configure Nginx
            sudo cp /home/git/gitlab/lib/support/nginx/gitlab /etc/nginx/sites-available/gitlab
            sudo ln -s /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/gitlab
            sudo rm /etc/nginx/sites-enabled/default
            sudo service nginx stop

          launch.command: |

            # Start Nginx server
            sudo service nginx start

          checkRunning.command: |

            # Launch check command
            sudo nginx -t

          stop.command: |

            # Stop Nginx server
            sudo service nginx stop

        - type: brooklyn.entity.basic.VanillaSoftwareProcess
          id: gitlab
          name: Gitlab instance
          version: 1
          # TODO: Add configuration for Gitlab instance like features to enable, themes, etc...
          # TODO: Also add configuration to enable HTTPS
          env:
            REDIS_HOST: $brooklyn:formatString("redis://%s:%d", component("redis").attributeWhenReady("host.address"), component("redis").attributeWhenReady("redis.port"))
            POSTGRESQL_HOST: $brooklyn:component("postgresql").attributeWhenReady("host.address")
            POSTGRESQL_PORT: $brooklyn:component("postgresql").attributeWhenReady("postgresql.port")
            GITLAB_HOST: $brooklyn:component("nginx").attributeWhenReady("host.address")
            GITLAB_URL: $brooklyn:formatString("http://%s", component("nginx").attributeWhenReady("host.address"))
            GITLAB_PORT: $brooklyn:component("nginx").config("nginx.http.port")
            GITLAB_VERSION: $brooklyn:config("gitlab.version")
            EMAIL_FROM: $brooklyn:config("gitlab.email.from")
            EMAIL_DISPLAY_NAME: $brooklyn:config("gitlab.email.display_name")
            EMAIL_REPLY_TO: $brooklyn:config("gitlab.email.reply_to")
            DB_USER: $brooklyn:config("gitlab.db.username")
            DB_PASSWORD: $brooklyn:config("gitlab.db.password")
            DB_DATABASE: $brooklyn:config("gitlab.db.database")
          install.command: |

            # Add git system user
            sudo adduser --disabled-login --gecos 'GitLab' git

            # Install required dependencies
            sudo apt-get update -y
            sudo apt-get upgrade -y
            sudo apt-get install -y libpq-dev build-essential zlib1g-dev libyaml-dev libssl-dev libgdbm-dev libreadline-dev libncurses5-dev libffi-dev curl openssh-server redis-server checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libicu-dev logrotate python-docutils pkg-config cmake nodejs git-core postgresql-client jq
            # Install postfix
            sudo debconf-set-selections <<< "postfix postfix/mailname string $GITLAB_HOST"
            sudo debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"
            sudo apt-get install -y postfix
            # Install ruby > 2.0
            sudo apt-get remove ruby1.8
            mkdir /tmp/ruby && cd /tmp/ruby
            curl -L --progress http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.6.tar.gz | tar xz
            cd ruby-2.1.6
            ./configure --disable-install-rdoc
            make
            sudo make install

            # Install bundler gems
            sudo gem install bundler --no-ri --no-rdoc

            # Clone gitlab from source
            cd /home/git
            sudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-ce.git -b ${GITLAB_VERSION:-7-11-stable} gitlab

            # Go to GitLab installation folder
            cd /home/git/gitlab

            # Copy the example GitLab config and modify it as per as our needs
            sudo -u git -H cp config/gitlab.yml.example config/gitlab.yml
            sudo sed -i "s/\(host:\).*$/\1 ${GITLAB_HOST}/g" config/gitlab.yml
            sudo sed -i "s/\(port:\).*$/\1 ${GITLAB_PORT}/g" config/gitlab.yml
            sudo sed -i "s/\(email_from:\).*$/\1 ${EMAIL_FROM:-gitlab@brooklyn.local}/g" config/gitlab.yml
            sudo sed -i "s/\(email_display_name:\).*$/\1 ${EMAIL_DISPLAY_NAME:-Gitlab powered by Brooklyn}/g" config/gitlab.yml
            sudo sed -i "s/\(email_reply_to:\).*$/\1 ${EMAIL_REPLY_TO:-gitlab@brooklyn.local}/g" config/gitlab.yml

            # Make sure GitLab can write to the log/ and tmp/ directories
            sudo chown -R git log/
            sudo chown -R git tmp/
            sudo chmod -R u+rwX,go-w log/
            sudo chmod -R u+rwX tmp/

            # Create directory for satellites
            sudo -u git -H mkdir /home/git/gitlab-satellites
            sudo chmod u+rwx,g=rx,o-rwx /home/git/gitlab-satellites

            # Make sure GitLab can write to the tmp/pids/ and tmp/sockets/ directories
            sudo chmod -R u+rwX tmp/pids/
            sudo chmod -R u+rwX tmp/sockets/

            # Make sure GitLab can write to the public/uploads/ directory
            sudo chmod -R u+rwX  public/uploads

            # Copy the example Unicorn config
            sudo -u git -H cp config/unicorn.rb.example config/unicorn.rb
            sudo sed -i "s/\(worker_processes\) [0-9]$/\1 $(($(nproc)+1))/g" config/unicorn.rb

            # Copy the example Rack attack config
            sudo -u git -H cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb

            # Configure Git global settings for git user, used when editing via web editor
            sudo -u git -H git config --global core.autocrlf input

            # Configure Redis connection settings
            sudo -u git -H cp config/resque.yml.example config/resque.yml
            sudo sed -i "s|\(production:\).*$|\1 $REDIS_HOST|g" config/resque.yml

            # Configure database connection settings
            sudo -u git -H cp config/database.yml.postgresql config/database.yml
            sudo sed -i "1,/username:/s/^.*\(username:\).*$/  \1 $DB_USER/g" config/database.yml
            sudo sed -i "1,/password:/s/^.*\(password:\).*$/  \1 $DB_PASSWORD/g" config/database.yml
            sudo sed -i "1,/host:/s/^.*\(host:\).*$/  \1 $POSTGRESQL_HOST/g" config/database.yml
            sudo sed -i "1,/port:/s/^.*\(port:\).*$/  \1 $POSTGRESQL_PORT/g" config/database.yml
            # Make config/database.yml readable to git only
            sudo -u git -H chmod o-rwx config/database.yml

            # Install gems
            sudo -u git -H bundle install -j$(nproc) --deployment --without development test mysql aws kerberos

            # Install Gitlab shell
            sudo -u git -H bundle exec rake gitlab:shell:install[v2.6.3] REDIS_URL=$REDIS_HOST RAILS_ENV=production

            # Initialize Database and Activate Advanced Features
            sudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production <<< "yes"

            # Install Init Script
            sudo cp lib/support/init.d/gitlab /etc/init.d/gitlab
            sudo cp lib/support/init.d/gitlab.default.example /etc/default/gitlab
            sudo update-rc.d gitlab defaults 21

            # Setup Logrotate
            sudo cp lib/support/logrotate/gitlab /etc/logrotate.d/gitlab

            # Compile Assets
            sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production

          customize.command: |

            # Create .pgpass file for postgresql connections
            echo "$POSTGRESQL_HOST:$POSTGRESQL_PORT:$DB_DATABASE:$DB_USER:$DB_PASSWORD" > ~/.pgpass
            chmod 600 ~/.pgpass

            # Create retrieve_private_token.sh file for sensors
            cat > ~/retrieve_private_token.sh <<- EOF
            #!/bin/bash
            psql -h $POSTGRESQL_HOST -p $POSTGRESQL_PORT -U $DB_USER $DB_DATABASE -c "COPY (SELECT authentication_token FROM USERS where admin = true LIMIT 1) TO STDOUT WITH CSV"
            EOF
            chmod +x ~/retrieve_private_token.sh

            # Configure Sendmail
            sudo sed -i "/config.action_mailer.raise_delivery_errors = true/a\ \ config.action_mailer.default_url_options = { host: \'$GITLAB_HOST\', port: $GITLAB_PORT }" /home/git/gitlab/config/environments/production.rb

          launch.command: |

            # Start GitLab instance
            sudo service gitlab start

          checkRunning.command: |

            # Go back to the root install directory
            cd /home/git/gitlab
            # Launch the check command
            sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production

          stop.command: |

            # Stop Gitlab instance
            sudo service gitlab stop

          brooklyn.initializers:
          - type: brooklyn.entity.software.ssh.SshCommandEffector
            brooklyn.config:
              name: rebuildAuthorizedKeys
              description: Rebuild the authorized_keys file
              executionDir: /home/git/gitlab
              command: sudo -u git -H bundle exec rake gitlab:shell:setup RAILS_ENV=production <<< 'yes'

          - type: brooklyn.entity.software.ssh.SshCommandEffector
            brooklyn.config:
              name: clearRedisCache
              description: Clear the redis cache. Invoke this effector only if the dashboard is showing wrong information
              executionDir: /home/git/gitlab
              command: sudo -u git -H bundle exec rake cache:clear RAILS_ENV=production

          - type: brooklyn.entity.software.ssh.SshCommandEffector
            brooklyn.config:
              name: precompileAssets
              description: Precompile assets. Invoke this effector if CSS is wrong after an upgrade
              executionDir: /home/git/gitlab
              command: sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production

          - type: brooklyn.entity.software.ssh.SshCommandEffector
            brooklyn.config:
              name: removeOrphanNamespaces
              description: Remove namespaces (dirs) from /home/git/repositories if they don't exist in GitLab database
              executionDir: /home/git/gitlab
              command: sudo -u git -H bundle exec rake gitlab:cleanup:dirs RAILS_ENV=production REMOVE=true

          - type: brooklyn.entity.software.ssh.SshCommandEffector
            brooklyn.config:
              name: removeOrphanRepositories
              description: Remove repositories (global only for now) from /home/git/repositories if they don't exist in GitLab database
              executionDir: /home/git/gitlab
              command: sudo -u git -H bundle exec rake gitlab:cleanup:repos RAILS_ENV=production REMOVE=true

          - type: brooklyn.entity.software.ssh.SshCommandSensor
            brooklyn.config:
              name: gitlab.private_token
              command: sh ~/retrieve_private_token.sh

          - type: brooklyn.entity.software.ssh.SshCommandSensor
            brooklyn.config:
              name: gitlab.url
              command: echo $GITLAB_URL
              period: 30s

          - type: brooklyn.entity.software.ssh.SshCommandSensor
            brooklyn.config:
              name: gitlab.users
              command: 'curl -H "PRIVATE-TOKEN: $(sh ~/retrieve_private_token.sh)" -s http://localhost/api/v3/users'
              period: 30s

          - type: brooklyn.entity.software.ssh.SshCommandSensor
            brooklyn.config:
              name: gitlab.users.length
              command: 'curl -H "PRIVATE-TOKEN: $(sh ~/retrieve_private_token.sh)" -s http://localhost/api/v3/users | jq "length"'
              period: 30s

          - type: brooklyn.entity.software.ssh.SshCommandSensor
            brooklyn.config:
              name: gitlab.projects
              command: 'curl -H "PRIVATE-TOKEN: $(sh ~/retrieve_private_token.sh)" -s http://localhost/api/v3/projects'
              period: 30s

          - type: brooklyn.entity.software.ssh.SshCommandSensor
            brooklyn.config:
              name: gitlab.projects.length
              command: 'curl -H "PRIVATE-TOKEN: $(sh ~/retrieve_private_token.sh)" -s http://localhost/api/v3/projects | jq "length"'
              period: 30s

          - type: brooklyn.entity.software.ssh.SshCommandSensor
            brooklyn.config:
              name: gitlab.groups
              command: 'curl -H "PRIVATE-TOKEN: $(sh ~/retrieve_private_token.sh)" -s http://localhost/api/v3/groups'
              period: 30s

          - type: brooklyn.entity.software.ssh.SshCommandSensor
            brooklyn.config:
              name: gitlab.groups.length
              command: 'curl -H "PRIVATE-TOKEN: $(sh ~/retrieve_private_token.sh)" -s http://localhost/api/v3/groups | jq "length"'
              period: 30s

          - type: brooklyn.entity.software.ssh.SshCommandSensor
            brooklyn.config:
              name: gitlab.namespaces
              command: 'curl -H "PRIVATE-TOKEN: $(sh ~/retrieve_private_token.sh)" -s http://localhost/api/v3/namespaces'
              period: 30s

          - type: brooklyn.entity.software.ssh.SshCommandSensor
            brooklyn.config:
              name: gitlab.namespaces.length
              command: 'curl -H "PRIVATE-TOKEN: $(sh ~/retrieve_private_token.sh)" -s http://localhost/api/v3/namespaces | jq "length"'
              period: 30s
